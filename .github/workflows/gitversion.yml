name: GitVersion Versioning

on:
  workflow_dispatch:


  # push:
  #   branches:
  #     - main
  #     - develop
  #     - 'release/**'
  #     - 'feature/**'
  #     - 'hotfix/**'
  # pull_request:
  #   branches:
  #     - main
  #     - develop

jobs:
  calculate-version:
    name: Calculate Version
    runs-on: ubuntu-latest
    outputs:
      semVer: ${{ steps.gitversion.outputs.semVer }}
      fullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}
      branchName: ${{ steps.gitversion.outputs.branchName }}
      sha: ${{ steps.gitversion.outputs.sha }}
      shortSha: ${{ steps.gitversion.outputs.shortSha }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history needed for GitVersion
          
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'
          
      - name: Calculate Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0
        with:
          useConfigFile: true
          configFilePath: GitVersion.yml
          
      - name: Display Version
        run: |
          echo "Version: ${{ steps.gitversion.outputs.semVer }}"
          echo "Full Version: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "Branch: ${{ steps.gitversion.outputs.branchName }}"
          echo "Commit: ${{ steps.gitversion.outputs.shortSha }}"
          
      - name: Create Version File
        run: |
          cat > version.json <<EOF
          {
            "version": "${{ steps.gitversion.outputs.semVer }}",
            "fullVersion": "${{ steps.gitversion.outputs.fullSemVer }}",
            "branch": "${{ steps.gitversion.outputs.branchName }}",
            "commit": "${{ steps.gitversion.outputs.sha }}",
            "shortCommit": "${{ steps.gitversion.outputs.shortSha }}",
            "buildNumber": "${{ steps.gitversion.outputs.commitsSinceVersionSource }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF
          
      - name: Upload Version Artifact
        uses: actions/upload-artifact@v4
        with:
          name: version-info
          path: version.json

  tag-release:
    name: Tag Release
    needs: calculate-version
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
      - name: Check if Tag Exists
        id: tag_check
        run: |
          if git rev-parse "v${{ needs.calculate-version.outputs.semVer }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Create Tag
        if: steps.tag_check.outputs.exists == 'false'
        run: |
          git tag -a "v${{ needs.calculate-version.outputs.semVer }}" \
            -m "Release version ${{ needs.calculate-version.outputs.semVer }}"
          git push origin "v${{ needs.calculate-version.outputs.semVer }}"
          
      - name: Create GitHub Release
        if: steps.tag_check.outputs.exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.calculate-version.outputs.semVer }}
          release_name: Release ${{ needs.calculate-version.outputs.semVer }}
          body: |
            ## Release ${{ needs.calculate-version.outputs.semVer }}
            
            **Commit:** ${{ needs.calculate-version.outputs.shortSha }}
            **Branch:** ${{ needs.calculate-version.outputs.branchName }}
            
            ### What's Changed
            See [full changelog](https://github.com/${{ github.repository }}/compare/v${{ needs.calculate-version.outputs.previousVersion }}...v${{ needs.calculate-version.outputs.semVer }})
          draft: false
          prerelease: false

  # terraform-versioning:
  #   name: Terraform Versioning
  #   needs: calculate-version
  #   runs-on: ubuntu-latest
    
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
        
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: 1.13.0
          
  #     - name: Update Terraform Variables
  #       run: |
  #         # Create a terraform.tfvars with version info
  #         cat > version.auto.tfvars <<EOF
  #         # Auto-generated version information
  #         app_version     = "${{ needs.calculate-version.outputs.semVer }}"
  #         build_number    = "${{ needs.calculate-version.outputs.commitsSinceVersionSource }}"
  #         git_commit      = "${{ needs.calculate-version.outputs.shortSha }}"
  #         git_branch      = "${{ needs.calculate-version.outputs.branchName }}"
  #         EOF
          
  #         echo "Version variables created:"
  #         cat version.auto.tfvars
          
  #     - name: Terraform Init
  #       run: terraform init
        
  #     - name: Terraform Validate
  #       run: terraform validate
        
  #     - name: Create Version-Tagged Plan
  #       run: |
  #         terraform plan \
  #           -var="app_version=${{ needs.calculate-version.outputs.semVer }}" \
  #           -out=tfplan-${{ needs.calculate-version.outputs.semVer }}
            
  #     - name: Upload Terraform Plan
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: terraform-plan-${{ needs.calculate-version.outputs.semVer }}
  #         path: tfplan-${{ needs.calculate-version.outputs.semVer }}

  update-readme:
    name: Update Version Badge
    needs: calculate-version
    runs-on: ubuntu-latest
    # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update README Badge
        run: |
          VERSION="${{ needs.calculate-version.outputs.semVer }}"
          
          # Check if badge exists
          if grep -q "\[!\[Version\]" README.md; then
            # Update existing badge
            sed -i "s|\[!\[Version\](.*).*\]|[![Version](https://img.shields.io/badge/version-${VERSION}-blue.svg)]|" README.md
          else
            # Add badge at the top of README
            sed -i "1s|^|[![Version](https://img.shields.io/badge/version-${VERSION}-blue.svg)](https://github.com/${{ github.repository }}/releases/tag/v${VERSION})\n\n|" README.md
          fi
          
      - name: Commit Version Badge
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add README.md
            git commit -m "Update version badge to ${{ needs.calculate-version.outputs.semVer }} [skip ci]"
            git push
          fi